require File.dirname(__FILE__) + '/lib/automation_config';

HC_BASE_URL = Configuration["healthcentral"]["base_url"]
BW_BASE_URL = Configuration["berkley"]["base_url"]
ASSET_HOST  = Configuration["asset_host"]

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'capybara'
require 'capybara/cucumber'
require 'selenium-webdriver'
require 'browsermob/proxy'

server = BrowserMob::Proxy::Server.new('/Users/rhuberdeau/Downloads/browsermob-proxy-2.0-beta-9/bin/browsermob-proxy')
server.start
@@proxy = server.create_proxy
@profile = Selenium::WebDriver::Firefox::Profile.new
@profile.proxy = @@proxy.selenium_proxy


Capybara.default_driver = :selenium
Capybara.run_server = false
# Capybara.register_driver :selenium do |app|
#   Capybara::Selenium::Driver.new(app, :browser => :chrome, :switches => %w[--allow-http-screen-capture --proxy-server=localhost:8080])
# end
Capybara.register_driver :selenium do |app|
  Capybara::Selenium::Driver.new(app, :profile => @profile)
end

# Capybara.register_driver :selenium do |app|
#   http_client         = Selenium::WebDriver::Remote::Http::Default.new
#   #http_client.timeout = 300
#   Capybara::Selenium::Driver.new(app,
#     :profile     => @profile,
#     :http_client => http_client,
#   )
# end
# Capybara.default_driver = :selenium
# @driver = Capybara::Session.new(:selenium)

Before do |scenario|
  @step_count = 0
end

AfterStep do |step|  
  @step_name ||= step.name.downcase.gsub(' ', '-')
  unless File.directory?("../tmp/capybara/#{Configuration.time}/#{@step_name}")
  	FileUtils.mkdir_p("../tmp/capybara/#{Configuration.time}/#{@step_name}")
  end

  screenshot_name = "#{step.steps.to_a[@step_count].gherkin_statement.name}.png".downcase.gsub(' ', '-')
  screenshot_path = "../tmp/capybara/#{Configuration.time}/#{@step_name}/#{screenshot_name}"
  page.save_screenshot (screenshot_path)
  @step_count += 1
end

After do |scenario|
  @step_name = scenario.name.downcase.gsub(' ', '-')
  if scenario.failed?
  	screenshot_name = "#{scenario.steps.to_a[@step_count].gherkin_statement.name}.png".downcase.gsub(' ', '-')
  	screenshot_path = "../tmp/capybara/#{Configuration.time}/#{@step_name}/#{screenshot_name}"
  	page.save_screenshot (screenshot_path)
  end
end

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
#ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.


# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature


